{
  "title": "Determining domains",
  "day": "26",
  "month": "10",
  "year": "2020",
  "desc": "We wrote some functions and then talked about their domains(declarations).",
  "category": "Class",
  "language": "Haskell",
  "showLine": "22",
  "input": "",
  "output": "",
  "code": [
    "-- Function that calculates nth fibonacci number",
    "fibonacci :: Int -> Int",
    "fib :: Int -> Int -> Int",
    "",
    "fibonacci n = fib n (1, 1)",
    "fib 0 _ = 0",
    "fib 1 _ = 1",
    "fib 2 (a, b) = b",
    "fib n (a, b) = fib (n-1) (b, a + b)",
    "",
    "",
    "-- Function that returns list of positions of equal chars for two strings",
    "matching :: [Char] -> [Char] -> [Int]",
    "matching a b = position (a) (b) ([], 0)",
    "",
    "position :: [Char] -> [Char] -> ([Int], Int) -> [Int]",
    "position [] b (n, c) = n",
    "position a [] (n, c) = n",
    "position (a:as) (b:bs) (n, c) = if a == b then position (as) (bs) (n++[c], c + 1) else position (as) (bs) (n, c)",
    "",
    "",
    "-- Function that returns tuple for a sentence",
    "-- First element being list of words, second being number of words",
    "-- and third being Bool that's true for odd number of words",
    "stringInfo :: [Char] -> ([[Char]], Int, Bool)",
    "getInfo :: [Char] -> [[Char]] -> Int -> Bool -> ([[Char]], Int, Bool)",
    "stringInfo s = getInfo(s)([[]])(0)(True)",
    "getInfo [] l n b = (l, n, b)",
    "getInfo (x:xs) l n b =",
    "  if x == ' '",
    "    then getInfo(xs)(l++[[]])(n + 1)(not b)",
    "    else getInfo(xs)(take n l++[(last(l)++[x])])(n)(b)",
    "",
    "",
    "-- Function that determines greatest common divisor of two numbers",
    "gCd:: Int -> Int -> Int",
    "gCd a b =",
    "  if b == 0",
    "    then a",
    "    else gCd(b)(a`mod`b)"
  ]
}