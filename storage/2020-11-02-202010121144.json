{
  "title": "List sorting and other",
  "day": "02",
  "month": "11",
  "year": "2020",
  "desc": "We created few lists with a condition and sorted using few different sort algorithms.",
  "category": "Class",
  "language": "Haskell",
  "showLine": "35",
  "io": false,
  "input": "",
  "output": "",
  "code": [
    "import Data.List",
    "-- Implement a function prime tht takes whole number and checks if its prime using recursion and list generator",
    "prime:: Int -> Bool",
    "prime n = if length([x | x <- [2..round(sqrt(fromIntegral(n)))], x /= n && n `mod` x == 0]) == 0 then True else False",
    "",
    "-- Implement a function that creates a list of prime numbers smaller than input",
    "primeList:: Int -> [Int]",
    "",
    "primeList 0 = []",
    "primeList n = if prime(n) then [n]++primeList(n-1) else primeList(n-1)",
    "",
    "-- Write a function that for input list Double returns list of whole number square roots with even indexes",
    "sqrtList:: [Double] -> [Int]",
    "",
    "sqrtList [] = []",
    "sqrtList (a:b:cs) = [round(sqrt(a))] ++ sqrtList(cs)",
    "-- Write a function that sorts the list using minsort",
    "-- Minsort sorts list n in n steps by putting the minimum element on start and does it for rest",
    "minSort:: [Int] -> [Int]",
    "",
    "minSort [] = []",
    "minSort l = [minimum(l)] ++ minSort(delete(minimum(l))(l)) ",
    "",
    "",
    "-- Write a function that sorts list of elements using quicksort",
    "qSort:: [Int] -> [Int]",
    "",
    "qSort [] = []",
    "qSort (x:xs) = qSort a ++ [x] ++ qSort b",
    "  where ",
    "    a = [n | n <- xs, n <= x]",
    "    b = [n | n <- xs, n > x]",
    "",
    "",
    "-- Implement mergesort",
    "msort:: [Int] -> [Int]",
    "merge:: [Int] -> [Int] -> [Int]",
    "",
    "msort [] = []",
    "msort [a] = [a]",
    "msort l = merge(msort(take n l))(msort(drop n l))",
    "  where n = length(l) `div` 2",
    "",
    "merge a [] = a",
    "merge [] b = b",
    "merge (x:xs) (y:ys)",
    "  | x > y = y : merge(x:xs)(ys)",
    "  | x <= y = x : merge(xs)(y:ys)",
    "",
    "",
    "-- Write a function that finds x in list of elements using binary search",
    "bSearch:: Int -> [Int] -> Int",
    "bSearch n l = if last x < ",
    "  where ",
    "    x = take length(l)/2 l",
    "    y = drop length(l)/2 l"
  ]
}