{
  "title": "Dict, list, pairs",
  "day": "05",
  "month": "11",
  "year": "2020",
  "desc": "We were playing with lists, dictionaries, pairs.",
  "category": "Class",
  "language": "Python",
  "showLine": "41",
  "io": false,
  "input": "",
  "output": "",
  "code": [
    "#Write a function that takes string as argument ",
    "#and returns the sorted list of pairs of letter and number of occurance of that letter in a string",
    "def brojac(string):",
    "    dic = {}",
    "",
    "    for letter in string:",
    "        dic[letter] = dic.get(letter, 0)+1",
    "    l = list(dic.items())",
    "    l.sort()",
    "    return l",
    "",
    "",
    "#Write a function that's going to print a matrix if we give it number o frows, cols and dictionary",
    "#Example: 3,3,{(0,0):1,(1,1):2,(1,2):3,(2,2):5}",
    "def write_matrix(rows, cols, dic):",
    "    for i in range(rows):",
    "        for j in range(cols):",
    "            print(dic.get((i, j), 0), end = ' ')",
    "",
    "",
    "#Write a program thats gonna check if a given string is pangram or not",
    "#Note: pangram is a sentence in which all letters of alphabet accure at least once",
    "def is_pangram(string):",
    "    string = string.replace(\" \", \"\")",
    "    string = string.replace(\".\", \"\")",
    "    string = string.replace(\",\", \"\")",
    "    string = string.replace(\";\", \"\")",
    "    string = string.replace(\":\", \"\")",
    "    string = string.replace(\"?\", \"\")",
    "    string = string.replace(\"!\", \"\")",
    "    string = string.replace(\"-\", \"\")",
    "",
    "    frequency = {}",
    "",
    "    for letter in string:",
    "        frequency[letter] = frequency.get(letter, 0) + 1",
    "",
    "    return len(frequency) == 27",
    "",
    "",
    "#Define dictionary fib that's going to store fibonacci numbers as global variable",
    "#Define function fibonacci thats going to take n as input",
    "#In case dictionary already contains n, return value, if it doesn't, it should fill dictionary to n",
    "fib = {0:1, 1:1}",
    "",
    "def fibonacci(n):",
    "    if n in fib:",
    "        return fib[n]",
    "    else:",
    "        for i in range(n + 1):",
    "            if i not in fib:",
    "                fib[i] = fib[i-1] + fib[i-2]",
    "        return fib[n]",
    "",
    "",
    "#Ask user to input natural number n and n movies and their corresponnding ratings",
    "#Films store in a list of movies and rating in a list of ratings",
    "#Calculate average rating and then create a dictionary using dict comprehension in form of movie:rating",
    "#Do it for all movies with higher than average rating",
    "n = int(input())",
    "movies = []",
    "ratings = []",
    "",
    "for i in range(n):",
    "    movie = input()",
    "    movies.append(movie)",
    "    rating = float(input())",
    "    ratings.append(rating)",
    "",
    "average_rating = sum(ratings)/len(ratings)",
    "",
    "dic_movies = {m:r for (m,r) in zip(movies,ratings) if r > average_rating}",
    "",
    "",
    "#Ask user to input 2 whole numbers thats going to represent interval",
    "#Using dictionary comprehension create a dict",
    "#It's going to assing a f(x) value for each number in interval",
    "#a) f(x) = x^2+2x-5",
    "#b) f(x) = x/2 + 5 if x is even",
    "#c) f(x) = |x|",
    "a = int(input())",
    "b = int(input())",
    "",
    "dic1 = {x:x**2+2*x-5 for x in range(a,b+1)}",
    "dic2 = {x:x/2+5 for x in range(a,b+1) if x%2==0} ",
    "dic3 = {x:abs(x) for x in range(a,b+1)}"
  ]
}