{
  "title": "Guards, where, calc",
  "day": "09",
  "month": "11",
  "year": "2020",
  "desc": "Using guards. Making different functions using conditions.",
  "category": "Class",
  "language": "Haskell",
  "showLine": "49",
  "input": "",
  "output": "",
  "code": [
    "-- Write a program that takes two natural numbers m and n less than or equal to 1000",
    "-- And calculates m to n using algorithm of fast powering",
    "-- Algorithm works the way it writes as many potentions to two as possible and solves with recursion",
    "fp:: Double -> Int -> Double",
    "fp a e ",
    "  | a == 0 = 0",
    "  | e == 0 = 1",
    "  | e `mod` 2 == 0 = fp (a * a) (e `div` 2)",
    "  | otherwise = a * fp a (e - 1)",
    "",
    "naivepow a e = product $ replicate e a",
    "",
    "",
    "-- Write four functions that return first, second, third and fourth element using \"_\" sample",
    "fir:: (t1, t2, t3, t4) -> t1",
    "fir (a, _, _, _) = a",
    "sec:: (t1, t2, t3, t4) -> t1",
    "sec (_, a, _, _) = a",
    "thi:: (t1, t2, t3, t4) -> t1",
    "thi (_, _, a, _) = a",
    "fou:: (t1, t2, t3, t4) -> t1",
    "fou (_, _, _, a) = a",
    "",
    "",
    "-- Using guards, write a recursive function that returns nth element from list in form of singular list",
    "-- In case nth element is impossible to find, return empty list",
    "nele _ [] = []",
    "nele n (x:xs)",
    "  | n < 0 = []",
    "  | n == 0 = [x]",
    "  | n > length xs = []",
    "  | otherwise = nele (n - 1) xs",
    "-- Write a program that for input list returns it's length using recursion and list generator",
    "llen1 (_:xs) = 1 + llen1 xs",
    "llen1 [] = 0",
    "",
    "llen2 l = sum [1 | _ <- l]",
    "",
    "",
    "-- Write a program that takes two points P, Q element of real numbers cubed and returns their Euclid distance",
    "dist:: (Double, Double, Double) -> (Double, Double, Double) -> Double",
    "dist (p1, p2, p3) (q1, q2, q3) = sqrt( x * x + y * y + z * z)",
    "  where ",
    "    x = p1 - q1",
    "    y = p2 - q2",
    "    z = p3 - q3",
    "",
    "",
    "-- Write a program that calculates the scalar product of two final real vectors represented with non empty lists",
    "-- of same sizes.",
    "prod @a(x:xs) b@(y:ys)",
    "  | ls < ly = prod (a ++ replicate (ly - lx) 0) b",
    "  | lx > ly = prod a (b ++ replicate (lx - ly) 0)",
    "  | otherwise = x * y + prod xs ys",
    "  where",
    "    lx = length a",
    "    ly = length b",
    "prod [] [] = 0",
    "",
    "",
    "-- Write a program that for input list with fixed length returns a pair (a, b) where a is first element and b is the last.",
    "fstnlst1 l = (head l, (head . drop k) l)",
    "  where k = length l - 1"
  ]
}